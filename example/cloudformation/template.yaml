AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Secret1:
    Default: SETEC Astronomy
    Description: A placeholder secret
    NoEcho: true
    Type: String
  Stage:
    Default: dev
    Description: The State to which to deploy Resources
    Type: String
Resources:
  ApiLambdaFunc:
    Properties:
      Code:
        S3Bucket: bc-wcf-dev-lambda-bin
        S3Key: Cirrostratus/2a520f8710663780316f4447c2ce8074
      Environment:
        Variables:
          DEPLOYMENT_STAGE:
            Ref: Stage
          FLASK_APP: cirrostratus
          FLASK_ENV: production
      FunctionName:
        Fn::Sub: ${Stage}-Cirrostratus-API
      Handler: cirrostratus.awslambda.handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Runtime: python3.7
      Timeout: 30
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
        - Fn::ImportValue:
            Fn::Sub: ${Stage}-RDSSecurityGroup
        SubnetIds:
          Fn::Split:
          - ','
          - Fn::ImportValue:
              Fn::Sub: ${Stage}-PrivateSubnets
    Type: AWS::Lambda::Function
  BriteApiContribution:
    Properties:
      LambdaProxyArn:
        Fn::GetAtt:
        - ApiLambdaFunc
        - Arn
      RestApiId:
        Fn::ImportValue:
          Fn::Sub: ${Stage}-BriteAPI
      ServiceToken:
        Fn::ImportValue:
          Fn::Sub: ${Stage}-ApiContribution-Provider
      SwaggerDefinition:
        info:
          description: 'Example/testbed CloudFormation project

            '
          title: Cirrostratus
          version: 1.0.0
        openapi: 3.0.0
        paths:
          /testbed/cirrostratus/coconuts:
            get:
              description: 'Get the cloppy clippity horse-like sound that two coconut
                halves make

                when banged together.

                '
              operationId: cirrostratusCoconuts
              responses:
                '200':
                  content:
                    text/plain:
                      example: 'Clippy-clop!

                        Clip-clip clop.

                        '
                      schema:
                        type: string
                  description: Some onomatopoeia.
              summary: The sounds that a coconut makes, Monty Python style.
          /testbed/cirrostratus/echo:
            post:
              description: 'Hello!

                Hello!

                '
              operationId: cirrostratusEcho
              responses:
                '200':
                  description: Whatever you posted
              summary: Echo back posted request body.
        tags: []
      Version: '1.0'
    Type: Custom::ApiContribution
  CirrostratusSecret1Parameter:
    Properties:
      Description: A placeholder secret
      Name:
        Fn::Sub: /${Stage}/cirrostratus/Secret1
      Type: String
      Value:
        Ref: Secret1
    Type: AWS::SSM::Parameter
  CirrostratusSecret1Secret:
    Properties:
      Description: A placeholder secret
      Name:
        Fn::Sub: /${Stage}/cirrostratus/Secret1
      SecretString:
        Ref: Secret1
    Type: AWS::SecretsManager::Secret
  LambdaInvokePermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ApiLambdaFunc
      Principal: apigateway.amazonaws.com
    Type: AWS::Lambda::Permission
  LambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - events.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - secretsmanager:GetSecretValue
            Effect: Allow
            Resource:
            - Fn::Sub: ${CirrostratusSecret1Secret}*
        PolicyName: AllowGetAccountSecret
      - PolicyDocument:
          Statement:
          - Action:
            - ssm:GetParameters
            Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Stage}/cirrostratus
        PolicyName: AllowGetSSMParams
    Type: AWS::IAM::Role
